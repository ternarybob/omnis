package omnis

import (
	"net/http"
	"net/http/httptest"
	"testing"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	"github.com/phuslu/log"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/ternarybob/arbor"
	"github.com/ternarybob/arbor/models"
)

// TestOmnisWithArborMemoryWriter tests omnis middleware integration with arbor memory writer
func TestOmnisWithArborMemoryWriter(t *testing.T) {
	gin.SetMode(gin.TestMode)

	// Create a logger with memory writer
	config := models.WriterConfiguration{}
	logger := arbor.Logger().WithMemoryWriter(config)

	// Create a test correlation ID
	correlationID := uuid.New().String()

	// Setup Gin engine with omnis middleware
	r := gin.New()
	r.Use(SetCorrelationID())

	// Test endpoint that uses the logger
	r.GET("/test", func(c *gin.Context) {
		// Get correlation ID from omnis middleware
		cid := GetCorrelationID(c)

		// Use logger with correlation ID from omnis
		loggerWithCID := logger.WithCorrelationId(cid)

		// Log some messages at different levels
		loggerWithCID.Info().Msg("Test info message from omnis endpoint")
		loggerWithCID.Warn().Msg("Test warning message from omnis endpoint")
		loggerWithCID.Error().Msg("Test error message from omnis endpoint")

		c.JSON(http.StatusOK, gin.H{"correlation_id": cid})
	})

	// Create request with correlation ID header
	req, _ := http.NewRequest("GET", "/test", nil)
	req.Header.Set("X-Correlation-ID", correlationID)
	w := httptest.NewRecorder()

	// Execute request
	r.ServeHTTP(w, req)

	// Verify response
	require.Equal(t, http.StatusOK, w.Code)
	assert.Equal(t, correlationID, w.Header().Get("X-Correlation-ID"))
	assert.Equal(t, correlationID, w.Header().Get(CORRELATION_ID_KEY))

	// Small delay to ensure writes are processed
	time.Sleep(50 * time.Millisecond)

	// Retrieve logs using the correlation ID
	logs, err := logger.GetMemoryLogs(correlationID, arbor.LogLevel(log.InfoLevel))
	require.NoError(t, err)

	// Should have 3 log entries
	assert.Equal(t, 3, len(logs), "Expected 3 log entries for correlation ID %s", correlationID)

	// Test level filtering - should have 2 entries (warn and error)
	warnLogs, err := logger.GetMemoryLogs(correlationID, arbor.LogLevel(log.WarnLevel))
	require.NoError(t, err)
	assert.Equal(t, 2, len(warnLogs), "Expected 2 log entries with warn level filter")

	// Test with error level - should have 1 entry
	errorLogs, err := logger.GetMemoryLogs(correlationID, arbor.LogLevel(log.ErrorLevel))
	require.NoError(t, err)
	assert.Equal(t, 1, len(errorLogs), "Expected 1 log entry with error level filter")
}

// TestOmnisGeneratedCorrelationIDWithMemoryWriter tests that omnis-generated correlation IDs work with memory writer
func TestOmnisGeneratedCorrelationIDWithMemoryWriter(t *testing.T) {
	gin.SetMode(gin.TestMode)

	// Create a logger with memory writer
	config := models.WriterConfiguration{}
	logger := arbor.Logger().WithMemoryWriter(config)

	// Setup Gin engine with omnis middleware
	r := gin.New()
	r.Use(SetCorrelationID())

	var capturedCorrelationID string

	// Test endpoint that captures the generated correlation ID
	r.GET("/test", func(c *gin.Context) {
		// Get correlation ID generated by omnis middleware
		cid := GetCorrelationID(c)
		capturedCorrelationID = cid

		// Use logger with correlation ID from omnis
		loggerWithCID := logger.WithCorrelationId(cid)

		// Log messages
		loggerWithCID.Info().Msg("Generated correlation ID test message")
		loggerWithCID.Debug().Msg("Debug message with generated correlation ID")

		c.JSON(http.StatusOK, gin.H{"correlation_id": cid})
	})

	// Create request WITHOUT correlation ID header (omnis should generate one)
	req, _ := http.NewRequest("GET", "/test", nil)
	w := httptest.NewRecorder()

	// Execute request
	r.ServeHTTP(w, req)

	// Verify response
	require.Equal(t, http.StatusOK, w.Code)
	require.NotEmpty(t, capturedCorrelationID, "Correlation ID should be generated by omnis")

	// Verify headers contain the generated correlation ID
	assert.Equal(t, capturedCorrelationID, w.Header().Get("X-Correlation-ID"))
	assert.Equal(t, capturedCorrelationID, w.Header().Get(CORRELATION_ID_KEY))

	// Small delay to ensure writes are processed
	time.Sleep(50 * time.Millisecond)

	// Retrieve logs using the generated correlation ID
	logs, err := logger.GetMemoryLogs(capturedCorrelationID, arbor.LogLevel(log.DebugLevel))
	require.NoError(t, err)

	// Should have 2 log entries
	assert.Equal(t, 2, len(logs), "Expected 2 log entries for generated correlation ID %s", capturedCorrelationID)
}

// TestOmnisMultipleRequestsWithMemoryWriter tests memory writer with multiple concurrent requests
func TestOmnisMultipleRequestsWithMemoryWriter(t *testing.T) {
	gin.SetMode(gin.TestMode)

	// Create a logger with memory writer
	config := models.WriterConfiguration{}
	logger := arbor.Logger().WithMemoryWriter(config)

	// Setup Gin engine with omnis middleware
	r := gin.New()
	r.Use(SetCorrelationID())

	// Test endpoint
	r.GET("/test", func(c *gin.Context) {
		cid := GetCorrelationID(c)
		loggerWithCID := logger.WithCorrelationId(cid)

		// Log unique message for this correlation ID
		loggerWithCID.Info().Msgf("Message for correlation ID: %s", cid)

		c.JSON(http.StatusOK, gin.H{"correlation_id": cid})
	})

	// Create multiple requests with different correlation IDs
	correlationIDs := []string{
		uuid.New().String(),
		uuid.New().String(),
		uuid.New().String(),
	}

	for _, cid := range correlationIDs {
		req, _ := http.NewRequest("GET", "/test", nil)
		req.Header.Set("X-Correlation-ID", cid)
		w := httptest.NewRecorder()

		r.ServeHTTP(w, req)
		require.Equal(t, http.StatusOK, w.Code)
	}

	// Small delay to ensure writes are processed
	time.Sleep(100 * time.Millisecond)

	// Verify each correlation ID has its own log entries
	for _, cid := range correlationIDs {
		logs, err := logger.GetMemoryLogs(cid, arbor.LogLevel(log.InfoLevel))
		require.NoError(t, err)
		assert.Equal(t, 1, len(logs), "Expected 1 log entry for correlation ID %s", cid)
	}

	// Verify that requesting logs for non-existent correlation ID returns empty
	nonExistentCID := uuid.New().String()
	emptyLogs, err := logger.GetMemoryLogs(nonExistentCID, arbor.LogLevel(log.InfoLevel))
	require.NoError(t, err)
	assert.Equal(t, 0, len(emptyLogs), "Expected 0 log entries for non-existent correlation ID")
}

// TestOmnisWithArborMemoryWriterErrorScenarios tests error scenarios
func TestOmnisWithArborMemoryWriterErrorScenarios(t *testing.T) {
	gin.SetMode(gin.TestMode)

	t.Run("Logger without memory writer", func(t *testing.T) {
		// Create logger WITHOUT memory writer
		logger := arbor.Logger()

		// Setup Gin engine
		r := gin.New()
		r.Use(SetCorrelationID())

		r.GET("/test", func(c *gin.Context) {
			cid := GetCorrelationID(c)
			loggerWithCID := logger.WithCorrelationId(cid)

			// Log message (should go to default writer, not memory)
			loggerWithCID.Info().Msg("Message without memory writer")

			c.JSON(http.StatusOK, gin.H{"correlation_id": cid})
		})

		correlationID := uuid.New().String()
		req, _ := http.NewRequest("GET", "/test", nil)
		req.Header.Set("X-Correlation-ID", correlationID)
		w := httptest.NewRecorder()

		r.ServeHTTP(w, req)
		require.Equal(t, http.StatusOK, w.Code)

		time.Sleep(50 * time.Millisecond)

		// Should return empty logs since no memory writer is configured
		logs, err := logger.GetMemoryLogs(correlationID, arbor.LogLevel(log.InfoLevel))
		require.NoError(t, err)
		assert.Equal(t, 0, len(logs), "Expected 0 log entries without memory writer")
	})

	t.Run("Empty correlation ID", func(t *testing.T) {
		config := models.WriterConfiguration{}
		logger := arbor.Logger().WithMemoryWriter(config)

		// Test with empty correlation ID
		logs, err := logger.GetMemoryLogs("", arbor.LogLevel(log.InfoLevel))
		require.NoError(t, err)
		assert.Equal(t, 0, len(logs), "Expected 0 log entries for empty correlation ID")
	})
}

// TestOmnisCorrelationIDHelperFunctions tests the correlation ID helper functions with memory writer
func TestOmnisCorrelationIDHelperFunctions(t *testing.T) {
	gin.SetMode(gin.TestMode)

	// Create logger with memory writer
	config := models.WriterConfiguration{}
	logger := arbor.Logger().WithMemoryWriter(config)

	t.Run("GetCorrelationID with existing ID", func(t *testing.T) {
		r := gin.New()
		r.Use(SetCorrelationID())

		r.GET("/test", func(c *gin.Context) {
			cid := GetCorrelationID(c)
			assert.NotEqual(t, "unknown", cid)
			assert.NotEmpty(t, cid)

			// Use with logger
			loggerWithCID := logger.WithCorrelationId(cid)
			loggerWithCID.Info().Msg("Test message with existing correlation ID")

			c.JSON(http.StatusOK, gin.H{"correlation_id": cid})
		})

		testCID := uuid.New().String()
		req, _ := http.NewRequest("GET", "/test", nil)
		req.Header.Set("X-Correlation-ID", testCID)
		w := httptest.NewRecorder()

		r.ServeHTTP(w, req)
		require.Equal(t, http.StatusOK, w.Code)

		time.Sleep(50 * time.Millisecond)

		logs, err := logger.GetMemoryLogs(testCID, arbor.LogLevel(log.InfoLevel))
		require.NoError(t, err)
		assert.Equal(t, 1, len(logs))
	})

	t.Run("GetCorrelationIDOrGenerate", func(t *testing.T) {
		r := gin.New()
		r.Use(SetCorrelationID())

		var generatedCID string

		r.GET("/test", func(c *gin.Context) {
			cid := GetCorrelationIDOrGenerate(c)
			generatedCID = cid
			assert.NotEqual(t, "unknown", cid)
			assert.NotEmpty(t, cid)

			// Use with logger
			loggerWithCID := logger.WithCorrelationId(cid)
			loggerWithCID.Info().Msg("Test message with generated correlation ID")

			c.JSON(http.StatusOK, gin.H{"correlation_id": cid})
		})

		// Request without correlation ID header
		req, _ := http.NewRequest("GET", "/test", nil)
		w := httptest.NewRecorder()

		r.ServeHTTP(w, req)
		require.Equal(t, http.StatusOK, w.Code)
		require.NotEmpty(t, generatedCID)

		time.Sleep(50 * time.Millisecond)

		logs, err := logger.GetMemoryLogs(generatedCID, arbor.LogLevel(log.InfoLevel))
		require.NoError(t, err)
		assert.Equal(t, 1, len(logs))
	})
}

// TestOmnisWithArborMemoryWriterLogLevels tests different log levels with memory writer
func TestOmnisWithArborMemoryWriterLogLevels(t *testing.T) {
	gin.SetMode(gin.TestMode)

	// Create logger with memory writer
	config := models.WriterConfiguration{}
	logger := arbor.Logger().WithMemoryWriter(config)

	// Setup Gin engine
	r := gin.New()
	r.Use(SetCorrelationID())

	r.GET("/test", func(c *gin.Context) {
		cid := GetCorrelationID(c)
		loggerWithCID := logger.WithCorrelationId(cid)

		// Log messages at all levels
		loggerWithCID.Trace().Msg("Trace level message")
		loggerWithCID.Debug().Msg("Debug level message")
		loggerWithCID.Info().Msg("Info level message")
		loggerWithCID.Warn().Msg("Warn level message")
		loggerWithCID.Error().Msg("Error level message")

		c.JSON(http.StatusOK, gin.H{"correlation_id": cid})
	})

	correlationID := uuid.New().String()
	req, _ := http.NewRequest("GET", "/test", nil)
	req.Header.Set("X-Correlation-ID", correlationID)
	w := httptest.NewRecorder()

	r.ServeHTTP(w, req)
	require.Equal(t, http.StatusOK, w.Code)

	time.Sleep(50 * time.Millisecond)

	// Test different level filters
	testCases := []struct {
		level         arbor.LogLevel
		expectedCount int
		description   string
	}{
		{arbor.LogLevel(log.TraceLevel), 5, "Trace level should include all messages"},
		{arbor.LogLevel(log.DebugLevel), 4, "Debug level should include debug, info, warn, error"},
		{arbor.LogLevel(log.InfoLevel), 3, "Info level should include info, warn, error"},
		{arbor.LogLevel(log.WarnLevel), 2, "Warn level should include warn, error"},
		{arbor.LogLevel(log.ErrorLevel), 1, "Error level should include only error"},
	}

	for _, tc := range testCases {
		t.Run(tc.description, func(t *testing.T) {
			logs, err := logger.GetMemoryLogs(correlationID, tc.level)
			require.NoError(t, err)
			assert.Equal(t, tc.expectedCount, len(logs), tc.description)
		})
	}
}

// BenchmarkOmnisArborMemoryWriterPerformance benchmarks the performance of omnis with arbor memory writer
func BenchmarkOmnisArborMemoryWriterPerformance(b *testing.B) {
	gin.SetMode(gin.TestMode)

	// Create logger with memory writer
	config := models.WriterConfiguration{}
	logger := arbor.Logger().WithMemoryWriter(config)

	// Setup Gin engine
	r := gin.New()
	r.Use(SetCorrelationID())

	r.GET("/test", func(c *gin.Context) {
		cid := GetCorrelationID(c)
		loggerWithCID := logger.WithCorrelationId(cid)

		// Log a single message
		loggerWithCID.Info().Msg("Benchmark test message")

		c.Status(http.StatusOK)
	})

	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		correlationID := uuid.New().String()
		req, _ := http.NewRequest("GET", "/test", nil)
		req.Header.Set("X-Correlation-ID", correlationID)
		w := httptest.NewRecorder()

		r.ServeHTTP(w, req)
	}
}
